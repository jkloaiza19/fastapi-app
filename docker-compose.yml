services:

  fastapi_postgres_db:
    image: postgres:latest
    container_name: fastapi_postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fastapi_db
    ports:
      - "5435:5432"
    expose:
      - "5435"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fastapi
      - default

  redis_server:
    container_name: redis_server
    image: redis:8.0-M02-alpine
    restart: always
    ports:
      - "6379:6379"
    expose:
      - "6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - redis_data:/var/redis:/root/redis
      - redis_data:/var/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=redis1234@
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
    networks:
      - fastapi
      - default

  # https://opensearch.org/docs/latest/install-and-configure/install-opensearch/docker/#sample-docker-composeyml
  opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}    # Sets the demo admin user password when using demo configuration, required for OpenSearch 2.12 and later
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network

  opensearch-node2:
    image: opensearchproject/opensearch:latest # This should be the same image used for opensearch-node1 to avoid issues
    container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - opensearch-net

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - opensearch-net


#  db_init:
#    image: python:3.11
#    build:
#      context: .
#    depends_on:
#       fastapi_postgres_db:
#         condition: service_healthy
#         restart: true
#    volumes:
#      - .:/app
#    working_dir: /app
#    env_file:
#      - .env
#    environment:
#      ASYNC_DATABASE_URL: ${ASYNC_DATABASE_URL}
#    command: >
#      sh -c "pip install poetry && poetry install && ./scripts/db_init.sh"
#
#  api:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     container_name: api
#     restart: on-failure
#     ports:
#       - "8000:8000"
#     expose:
#       - "8000"
#     env_file:
#       - .env
#     volumes:
#       - .:/usr/src/app
#     command: poetry run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
#     depends_on:
#       fastapi_postgres_db:
#         condition: service_healthy
#         restart: true
#       redis_server:
#         condition: service_healthy
#         restart: true
#     networks:
#       - fastapi
#       - default

networks:
  fastapi:
  opensearch-net:

volumes:
  postgres_data:
  redis_data:
  opensearch-data1:
  opensearch-data2:
